for(i in 1:6) { #-- Create objects  'r.1', 'r.2', ... 'r.6' --
nam <- paste("r",i, sep=".")
assign(nam, 1:i)
}
fix(r.4)
fix(r.2)
for(i in 1:6) { #-- Create seven vectors to hold the concatenated data
name <- paste("v",i)
assign(name)
}
for(i in 1:6) { #-- Create seven vectors to hold the concatenated data
name <- paste("v",i,sep="")
assign(name)
}
for(i in 1:6) { #-- Create seven vectors to hold the concatenated data
name <- paste("v",i,sep="")
assign(name, ())
}
for(i in 1:6) { #-- Create seven vectors to hold the concatenated data
name <- paste("v",i,sep="")
assign(name, value=FALSE)
}
fix(r.4)
c(v5,(1,2,3,4,5))
m<-c(v5,(1,2,3,4,5))
m<-c(v5,10)
fix(m)
> for(i in 1:6) { #-- Create seven vectors to hold the concatenated data
+     name <- paste("v",i,sep="")
+     assign(name, value=TRUE)
+ }
> for(i in 1:6) { #-- Create seven vectors to hold the concatenated data
name <- paste("v",i,sep="")
assign(name, value=TRUE)
}
> for(i in 1:7) { #-- Create seven vectors to hold the concatenated data
name <- paste("v",i,sep="")
assign(name, value=TRUE)
}
> for(i in 1:7) { #-- Create seven vectors to hold the concatenated data
name <- paste("v",i,sep="")
assign(name, value=TRUE)
}
> for(i in 1:7) {
name <- paste("v",i,sep="")
assign(name, value=TRUE)
}
> for(i in 1:6) {name <- paste("v",i,sep="");assign(name, value=FALSE)}
> for(i in 1:6) {name <- paste("v",i,sep="");assign(name, value=FALSE)}
for(i in 1:6){vectorname<-paste("vector",i,sep="");assign(vectorname, value=TRUE)}
for(i in 1:7){vectorname<-paste("vector",i,sep="");assign(vectorname, value=TRUE)}
a<-c(1,2,3,4)
b<-c(vector1,a)
fix(b)
FatData <- read.csv("~/R/Clark and Ma'ayan.csv")
a <- nrow(FatData)
m <- a-1
b <- ncol(FatData)
n <- b-1
#Trim the labels off the data matrix
D1<-FatData[,2:b]
D<-D1[2:a,]
#Create a vector containing the mean value of each row
rowmeans <- vector(length=m)
for (i in 1:m){
rowsum <-0
for(j in 1:n){rowsum<-rowsum+c(D[i,j])}
rowmeans[i]<-rowsum/n
}
#Center the data matrix D by subtracting the row-mean from each entry in every row.
Dprime <- matrix(,nrow=m,ncol=n)
for(i in 1:m){
for(j in 1:n){Dprime[i,j]<-D[i,j]-rowmeans[i]}}
#Check that Dprime rowmeans equal zero
DProwmeans <- vector(length=m)
for (i in 1:m){
rowsum <-0
for(j in 1:n){rowsum<-rowsum+c(Dprime[i,j])}
DProwmeans[i]<-rowsum/n
}
DProwmeans
#Compute the covariance matrix to the shifted matrix Dprime (C=(1/n)Dprime%*%DprimeT)
DprimeT <-t(Dprime)
C<- matrix(,nrow=m,ncol=m)
C<-(1/m)*Dprime%*%DprimeT
#Compute the eigenvalues of the covariance matrix C
Ceigen <- eigen(C,symmetric=FALSE,only.values = TRUE)
Ctotal <- sum(Ceigen$values)
threshold <- .9 #90% of total contribution is our threshold
cutoff <- threshold*Ctotal
count <- 1
Csum <- 0
while(Csum<cutoff){
Csum <- Csum + Ceigen$values[count]
count <- count +1
}
count<-count-1 #we would have started the count at zero, but we used it as an index.
count;
#Compute the eigenvectors.
Ceigvec <- eigen(C,symmetric=FALSE,only.values = FALSE)
#put the eigenvectors into a matrix
W <- matrix(nrow=m,ncol=count)
#SOMETHING IS FISHY HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
while(i<count+1){
W <- cbind(Ceigvec$vectors[,i])
i <- i+1;
}
#Transpose the matrix
WT <- t(W)
DPCA <- WT%*%Dprime
plot(D)
head(D)
FatData
plot(Ceigvec$vectors[1])
plot(Ceigvec$vectors[2])
lines(Ceigvec$vectors[1])
lines(Ceigvec$vectors[2])
Ceigenvec
Ceigvec
# Define 2 vectors
one <- Ceigvec$vectors[,1]
two <- Ceigvec$vectors[,2]
# Graph cars using a y axis that ranges from 0 to 12
plot(one, type="o", col="blue")
# Graph trucks with red dashed line and square points
lines(two, type="o", pch=22, lty=2, col="red")
# Create a title with a red, bold/italic font
title(main="Principal components", col.main="red", font.main=4)
# Define 2 vectors
one <- Ceigvec$vectors[,1]
two <- Ceigvec$vectors[,2]
# Graph cars using a y axis that ranges from 0 to 12
plot(one, type="o", col="blue")
# Graph trucks with red dashed line and square points
lines(two, type="o", pch=22, lty=2, col="red")
# Create a title with a red, bold/italic font
title(main="Principal components", col.main="red", font.main=4)
# Define 2 vectors
one <- Ceigvec$vectors[,1]
two <- Ceigvec$vectors[,2]
# Graph cars using a y axis that ranges from 0 to 12
plot(one, type="o", col="blue")
# Graph trucks with red dashed line and square points
lines(two, type="o", pch=22, lty=2, col="red")
# Create a title with a red, bold/italic font
title(main="Principal components", col.main="red", font.main=4)
library("rflowcyt")
library("rflowcyt")
load("~/R/IRMDA/temp.RData")
save(A, 'temp.RData')
save(A, '~/temp.RData')
save(A, file='~/temp.RData')
v <- (5,4,8,10)
v <- c(5,4,8,10)
cov(v)
library(lattice)
data1 <- read.csv('/Users/nooree/Google Drive/R/Time Series Analysis/NG12, NG13/NG12 G1 CD41.csv')
head(data1)
head(data1)
names(data1)
install.packages(coefplot2)
install.packages('coefplot2')
library(lme4)
Dyestuff
head(Dyestuff)
str(Dyestuff)
summary(Dyestuff)
attach(Dyestuff)
xyplot(Batch ~Yield)
lmefit <- lme4(Yield ~ Batch, data=Dyestuff)
lmefit <- lmer(Yield ~ Batch, data=Dyestuff)
lmefit <- lmer(Yield ~ Batch + (1|Batch), data=Dyestuff)
source('ReadNaRescale.R')
setwd
setwd('C:\Users\nooree\Google Drive\tsrepo\R')
setwd('C:/Users/nooree/Google Drive/tsrepo/R')
names <- ("CD41 G1", "CD41 G2", "Intensity")
out <- "./output/"
names <- c("CD41 G1", "CD41 G2", "Intensity")
out <- "./output/"
thrsh <- (.2,.2)
thrsh <- c(.2,.2)
files.in <- ("./data/NG12 G1 CD41.csv", "./data/NG12 G2 CD41.csv")
files.in <- c("./data/NG12 G1 CD41.csv", "./data/NG12 G2 CD41.csv")
source('ReadNaRescale.R')
source('GraphMaker.R')
source('FeaturesMaker.R')
source('DoKSTest.R')
library(lattice)
GetEllipsis <- function (...){
output.list <- as.list(substitute(list(...)))[-1L]
return(output.list)
}
#'Takes a list of paths to ts data and generates analysis files
#'@param names this is a list of: the group names, the y-axis label
#'@param save.dir this is the path to the folder where graphs will go
#'@param ... list of paths to ts data
#'@description this is the mother wrapper for this package
TimeSAnalysis <- function (names, save.dir, thresholds, ...){
input.list <- GetEllipsis(...)
ts.cols.paired <- list()
for (k in seq(1, length(input.list), by=2)){
ts.cols.paired[[k]] <- ReadNaRescale(as.character(input.list[[k]]),
as.character(input.list[[k+1]]))
}
feat.list <- FeatureBinder(ts.cols.paired, thresholds[1], thresholds[2])
GraphMaker1(ts.cols.paired, names, save.dir)
ksout <- DoKSTest(ts.cols.paired)
pcaout <- GraphMaker2(feat.list, names, save.dir)
list(ks.results = ksout,
features.pca.results = pcaout)
}
TimeSAnalysis(names, out, thrsh, files.in)
TimeSAnalysis(names, out, thrsh, "./data/NG12 G1 CD41.csv", "./data/NG12 G2 CD41.csv")
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
names <- c("CD41 G1", "CD41 G2", "Intensity")
out <- "../output/"
thrsh <- c(.2,.2)
files.in <- c("./data/NG12 G1 CD41.csv", "./data/NG12 G2 CD41.csv")
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
source('ReadNaRescale.R')
source('GraphMaker.R')
source('FeaturesMaker.R')
source('DoKSTest.R')
library(lattice)
GetEllipsis <- function (...){
output.list <- as.list(substitute(list(...)))[-1L]
return(output.list)
}
#'Takes a list of paths to ts data and generates analysis files
#'@param names this is a list of: the group names, the y-axis label
#'@param save.dir this is the path to the folder where graphs will go
#'@param ... list of paths to ts data
#'@description this is the mother wrapper for this package
TimeSAnalysis <- function (names, save.dir, thresholds, ...){
input.list <- GetEllipsis(...)
ts.cols.paired <- list()
for (k in seq(1, length(input.list), by=2)){
ts.cols.paired[[k]] <- ReadNaRescale(as.character(input.list[[k]]),
as.character(input.list[[k+1]]))
}
feat.list <- FeatureBinder(ts.cols.paired, thresholds[1], thresholds[2])
GraphMaker1(ts.cols.paired, names, save.dir)
ksout <- DoKSTest(ts.cols.paired)
pcaout <- GraphMaker2(feat.list, names, save.dir)
list(ks.results = ksout,
features.pca.results = pcaout)
}
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
source('FeaturesMaker.R')
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
source('GraphMaker.R')
source('FeaturesMaker.R')
source('DoKSTest.R')
source('ReadNaRescale.R')
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
source('ReadNaRescale.R')
source('GraphMaker.R')
source('FeaturesMaker.R')
source('DoKSTest.R')
library(lattice)
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
source('ReadNaRescale.R')
source('GraphMaker.R')
source('FeaturesMaker.R')
source('DoKSTest.R')
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
source('ReadNaRescale.R')
source('GraphMaker.R')
source('FeaturesMaker.R')
source('DoKSTest.R')
library(lattice)
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
source('ReadNaRescale.R')
source('GraphMaker.R')
source('FeaturesMaker.R')
source('DoKSTest.R')
TimeSAnalysis(names, out, thrsh, "../data/NG12 G1 CD41.csv", "../data/NG12 G2 CD41.csv")
